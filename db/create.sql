
DROP TABLE IF EXISTS order_items CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS balance_tx CASCADE;
DROP TABLE IF EXISTS account_balance CASCADE;
DROP TABLE IF EXISTS Purchases CASCADE;
DROP TABLE IF EXISTS Wishes CASCADE;
DROP TABLE IF EXISTS Products CASCADE;
DROP TABLE IF EXISTS Users CASCADE;

CREATE TABLE Users (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email TEXT UNIQUE NOT NULL,
    full_name TEXT NOT NULL,
    address TEXT NOT NULL,
    password_hash TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    cart INTEGER[],
    purchases INTEGER[]
);

CREATE TABLE account_balance (
    user_id INT PRIMARY KEY REFERENCES Users(id) ON DELETE CASCADE,
    balance_cents BIGINT NOT NULL DEFAULT 0
);

CREATE TABLE balance_tx (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    amount_cents BIGINT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    note TEXT
);

CREATE TABLE Products (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name TEXT UNIQUE NOT NULL,
    price DECIMAL(12,2) NOT NULL,
    available BOOLEAN DEFAULT TRUE
);

CREATE TABLE orders (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    buyer_id INT REFERENCES Users(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    total_cents BIGINT NOT NULL,
    fulfilled BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE order_items (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    order_id INT NOT NULL REFERENCES Orders(id) ON DELETE CASCADE,
    product_id INT NOT NULL REFERENCES Products(id),
    seller_id INT,
    quantity INT NOT NULL CHECK (quantity > 0),
    unit_price_cents BIGINT NOT NULL CHECK (unit_price_cents >= 0),
    fulfilled_at TIMESTAMPTZ
);

CREATE TABLE Purchases (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    pid INT NOT NULL REFERENCES Products(id),
    time_purchased TIMESTAMPTZ NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC')
);

CREATE TABLE Wishes (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    pid INT NOT NULL REFERENCES Products(id),
    time_added TIMESTAMPTZ NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC')
);


CREATE TABLE IF NOT EXISTS Cart (
  id BIGSERIAL PRIMARY KEY,
  user_id INT NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT one_cart_per_user UNIQUE (user_id)
);

CREATE TABLE IF NOT EXISTS CartItem (
  id BIGSERIAL PRIMARY KEY,
  cart_id BIGINT NOT NULL REFERENCES Cart(id) ON DELETE CASCADE,
  product_id INT NOT NULL REFERENCES Products(id),
  quantity INT NOT NULL CHECK (quantity > 0),
  added_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(cart_id, product_id)
);

CREATE OR REPLACE FUNCTION touch_cart_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS cart_update_trigger ON Cart;
CREATE TRIGGER cart_update_trigger
  BEFORE UPDATE ON Cart
  FOR EACH ROW
  EXECUTE FUNCTION touch_cart_updated_at();

INSERT INTO Users (id, email, full_name, address, password_hash)
  SELECT 6, 'alice@example.com', 'Alice Example', '1 A St', 'pw-hash'
  WHERE NOT EXISTS (SELECT 1 FROM Users WHERE id = 1);

INSERT INTO Users (id, email, full_name, address, password_hash)
  SELECT 7, 'bob@example.com', 'Bob Example', '2 B Ave', 'pw-hash'
  WHERE NOT EXISTS (SELECT 1 FROM Users WHERE id = 2);

INSERT INTO Products (id, name, price, available)
  SELECT 7, 'Sample Widget', 9.99, TRUE WHERE NOT EXISTS (SELECT 1 FROM Products WHERE id = 1);

INSERT INTO Products (id, name, price, available)
  SELECT 8, 'Another Thing', 19.95, TRUE WHERE NOT EXISTS (SELECT 1 FROM Products WHERE id = 2);

-- Create carts and fill sample items if they don't exist
INSERT INTO Cart (user_id)
  SELECT 1 WHERE NOT EXISTS (SELECT 1 FROM Cart WHERE user_id = 1);

INSERT INTO Cart (user_id)
  SELECT 2 WHERE NOT EXISTS (SELECT 1 FROM Cart WHERE user_id = 2);

INSERT INTO CartItem (cart_id, product_id, quantity)
  SELECT c.id, 1, 2 FROM Cart c WHERE c.user_id = 1
  AND NOT EXISTS (SELECT 1 FROM CartItem ci WHERE ci.cart_id = c.id AND ci.product_id = 1);

INSERT INTO CartItem (cart_id, product_id, quantity)
  SELECT c.id, 2, 1 FROM Cart c WHERE c.user_id = 1
  AND NOT EXISTS (SELECT 1 FROM CartItem ci WHERE ci.cart_id = c.id AND ci.product_id = 2);
